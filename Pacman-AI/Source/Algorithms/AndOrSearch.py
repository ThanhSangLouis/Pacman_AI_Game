from Utils.utils import DDX, isValid2
from constants import FOOD

ACTIONS = ['UP', 'DOWN', 'LEFT', 'RIGHT']

def apply_action(state, action, _map, N, M):
    row, col = state
    if action == 'UP':
        target = (row - 1, col)
    elif action == 'DOWN':
        target = (row + 1, col)
    elif action == 'LEFT':
        target = (row, col - 1)
    elif action == 'RIGHT':
        target = (row, col + 1)
    else:
        return [state]

    # Ki·ªÉm tra xem di chuy·ªÉn c√≥ h·ª£p l·ªá kh√¥ng
    if isValid2(_map, target[0], target[1], N, M):
        return [target]  # N·∫øu h·ª£p l·ªá, tr·∫£ v·ªÅ v·ªã tr√≠ m·ªõi
    return [state]  # N·∫øu kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ tr·∫°ng th√°i hi·ªán t·∫°i

def is_goal(food_pos, row, col):
    return (row, col) in food_pos

def and_or_graph_search(_map, state, N, M, goal_set):
    def andorsearch(state, path):
        print("üü° OR node:", state)  # ƒê√¢y l√† node OR: l·ª±a ch·ªçn h√†nh ƒë·ªông t·ª´ tr·∫°ng th√°i hi·ªán t·∫°i

        if is_goal(goal_set, state[0], state[1]):
            print("üéØ REACHED GOAL at", state)
            return 'GOAL'

        if state in path:
            print("üîÅ LOOP DETECTED at", state)
            return 'FAILURE'

        path = path + [state]  # Sao ch√©p path, kh√¥ng s·ª≠a path g·ªëc

        # Duy·ªát t·ª´ng h√†nh ƒë·ªông c√≥ th·ªÉ th·ª±c hi·ªán t·ª´ state hi·ªán t·∫°i (node OR)
        for action in ACTIONS:
            outcomes = apply_action(state, action, _map, N, M)
            subplans = []

            print(f"    ‚öôÔ∏è AND node for action '{action}': outcomes = {outcomes}")  
            # Node AND th·ªÉ hi·ªán c√°c k·∫øt qu·∫£ kh√°c nhau c·ªßa 1 h√†nh ƒë·ªông ph·∫£i ƒë·ªÅu th√†nh c√¥ng

            # V·ªõi m·ªói k·∫øt qu·∫£ c√≥ th·ªÉ c·ªßa h√†nh ƒë·ªông, g·ªçi ƒë·ªá quy
            for outcome in outcomes:
                if outcome != state:  # N·∫øu tr·∫°ng th√°i m·ªõi kh√°c tr·∫°ng th√°i hi·ªán t·∫°i
                    subplan = andorsearch(outcome, path)
                    if subplan == 'FAILURE':
                        print(f"    ‚ùå Outcome {outcome} c·ªßa action '{action}' th·∫•t b·∫°i, b·ªè qua action n√†y")
                        break  # N·∫øu m·ªôt outcome fail, b·ªè lu√¥n h√†nh ƒë·ªông n√†y
                    subplans.append(subplan)

            # N·∫øu t·∫•t c·∫£ c√°c outcomes ƒë·ªÅu th√†nh c√¥ng (ƒë·ªß s·ªë), tr·∫£ v·ªÅ k·∫ø ho·∫°ch
            if len(subplans) == len(outcomes):
                print(f"    ‚úÖ Action '{action}' th√†nh c√¥ng v·ªõi subplans: {subplans}")
                return (action, subplans)

        # N·∫øu kh√¥ng h√†nh ƒë·ªông n√†o th√†nh c√¥ng, tr·∫£ v·ªÅ failure
        print(f"‚ùå OR node t·∫°i {state} kh√¥ng c√≥ h√†nh ƒë·ªông th√†nh c√¥ng")
        return 'FAILURE'

    return andorsearch(state, [])

def extract_next_action(plan):
    if isinstance(plan, tuple):
        action, subplans = plan
        if isinstance(subplans, list) and len(subplans) > 0:
            return action, subplans[0]  # Tr·∫£ v·ªÅ h√†nh ƒë·ªông hi·ªán t·∫°i + k·∫ø ho·∫°ch ti·∫øp theo
        else:
            return action, None
    return None, None

def get_first_action(plan):
    if not plan or plan == 'FAILURE':
        return None
    if isinstance(plan, tuple):
        return plan[0]
    return None

def move_from_action(state, action):
    row, col = state
    if action == 'UP': return (row - 1, col)
    if action == 'DOWN': return (row + 1, col)
    if action == 'LEFT': return (row, col - 1)
    if action == 'RIGHT': return (row, col + 1)
    return state